#!/usr/bin/env python
# -*- coding: utf8 -*-

import pygtk
pygtk.require20()
import gtk

from twisted.internet import gtk2reactor
gtk2reactor.install()

import logging
import os.path

from ConfigParser import RawConfigParser, NoOptionError, NoSectionError

from twisted.internet import defer
from twisted.internet import reactor
from twisted.internet import task

from rss_monkey.client import RssClient
from rss_monkey.common.utils import singleton, defer_to_thread

# see setup_logging
LOG = logging.getLogger(__name__)

CONFIG_FILE = '/etc/rss_monkey_client.ini'


@singleton
class Config(object):
    def __init__(self):
        self.parser = RawConfigParser()
        self.parser.read(CONFIG_FILE)

    def get(self, section, option):
        return self.parser.get(section, option)


@singleton
class UserConfig(object):
    def __init__(self):
        self.path = os.path.expanduser('~/.rss_monkey.ini')
        self.parser = RawConfigParser()
        self.parser.read(self.path)

    def get(self, section, option):
        return self.parser.get(section, option)

    def set(self, section, option, value=None):
        if not self.parser.has_section(section):
            self.parser.add_section(section)

        self.parser.set(section, option, value)

    def write(self):
        with open(self.path, 'w') as f:
            self.parser.write(f)


class ScheduledTask(object):

    def __init__(self, fnc, canceller=None, *args, **kw):
        self.deferred = defer.Deferred(canceller)

        self._fnc = fnc
        self._args = args
        self._kw = kw

    def schedule(self, seconds):
        LOG.debug('Planning %s: %s', self.__class__.__name__, self._fnc.__name__)

        d = task.deferLater(reactor, seconds, self._fnc, *self._args, **self._kw)
        d.chainDeferred(self.deferred)

        return self.deferred

    def cancel(self):
        self.deferred.cancel()


def show_error_dialog(parent, message):
    dialog = gtk.MessageDialog(parent,
                               gtk.DIALOG_DESTROY_WITH_PARENT,
                               gtk.MESSAGE_ERROR,
                               gtk.BUTTONS_CLOSE, message)
    dialog.run()
    dialog.destroy()


def open_main_window():
    ui_file = Config().get('ui', 'main_window_path')
    main_window = MainWindow(ui_file)
    main_window.show()


def open_config_dialog(parent):
    parent.set_sensitive(False)
    try:
        ui_file = Config().get('ui', 'config_dialog_path')
        salt = Config().get('global', 'salt')
        dialog = ConfigurationWindow(ui_file, salt)
        dialog.show()
    finally:
        parent.set_sensitive(True)


def open_add_channel_dialog(parent):
    parent.set_sensitive(False)
    try:
        ui_file = Config().get('ui', 'add_channel_dialog_path')
        dialog = AddChannel(ui_file)
        dialog.show()
        return dialog
    finally:
        parent.set_sensitive(True)


class ConfigurationWindow(object):
    def __init__(self, ui_file, salt):
        self.salt = salt

        self.server_status_task = None
        self.login_status_task = None

        self.passwd_is_hash = False

        self._init_window(ui_file)

    def _init_window(self, ui_file):
        self.builder = gtk.Builder()
        self.builder.add_from_file(ui_file)

        signals = {'on_register_button_clicked': self.on_register_button_clicked,
                   'on_cancel_button_clicked': lambda widget, *data: self.close(),
                   'on_ok_button_clicked': self.on_ok_button_clicked,
                   'on_server_url_entry_changed': self.on_server_url_entry_changed,
                   'on_login_entry_changed': self.on_credentials_changed,
                   'on_passwd_entry_changed': self.on_credentials_changed}

        self.builder.connect_signals(signals)

        self._set_widget_objects()

        self.load_config()

        self.dialog.connect('destroy', lambda widget, *data: self.close())
        self.dialog.set_modal(True)

    def _set_widget_objects(self):
        widgets = ('dialog', 'server_url_entry', 'login_entry', 'passwd_entry',
                   'login_status', 'server_status')
        go = self.builder.get_object
        for widget_name in widgets:
            setattr(self, widget_name, go(widget_name))

    def close(self):
        self.dialog.hide()
        self.dialog.destroy()

    def show(self):
        self.dialog.show()

    def load_config(self):
        cfg = UserConfig()

        try:
            url = cfg.get('server', 'url').strip()
            self.server_url_entry.set_text(url)
        except (NoOptionError, NoSectionError):
            pass

        try:
            login = cfg.get('user', 'login').strip()
            passwd = cfg.get('user', 'passwd').strip()

            self.login_entry.set_text(login)
            self.passwd_entry.set_text(passwd)
            self.passwd_is_hash = True
        except (NoOptionError, NoSectionError):
            pass

    @defer.inlineCallbacks
    def on_register_button_clicked(self, widget, *data):
        self.dialog.set_sensitive(False)
        try:
            login = self.login_entry.get_text().strip()
            passwd = self.passwd_entry.get_text().strip()

            self.login_status.set_text('...')

            if not login or not passwd:
                return

            url = self.server_url_entry.get_text().strip()

            if not url:
                return

            pwdhash = self._create_passwd_hash(passwd)

            try:
                yield RssClient.register_user(url, login, pwdhash)

                LOG.info('User registered: %s', login)
                self.login_status.set_text(' OK')
            except Exception as e:
                LOG.info('Exception when registering: %s: %s', e.__class__.__name__, str(e))
                self.login_status.set_text('ERR')
        finally:
            self.dialog.set_sensitive(True)

    def on_ok_button_clicked(self, widget, *data):
        login = self.login_entry.get_text().strip()
        passwd = self.passwd_entry.get_text().strip()
        url = self.server_url_entry.get_text().strip()

        if not login:
            show_error_dialog(self.dialog, 'Není zadán login.')

        if not passwd:
            show_error_dialog(self.dialog, 'Není zadáno heslo.')

        if not url:
            show_error_dialog(self.dialog, 'Není zadána URL serveru.')

        pwdhash = self._create_passwd_hash(passwd)

        cfg = UserConfig()
        cfg.set('user', 'login', login)
        cfg.set('user', 'passwd', pwdhash)
        cfg.set('server', 'url', url)
        cfg.write()

        self.close()

    @defer.inlineCallbacks
    def on_server_url_entry_changed(self, widget, *data):
        if self.server_status_task:
            self.server_status_task.cancel()

        self.server_status.set_text('...')

        url = self.server_url_entry.get_text().strip()

        self.server_status_task = ScheduledTask(self._check_connection, url=url)
        try:
            yield self.server_status_task.schedule(1)

            LOG.debug('Server URL: OK')
            self.server_status.set_text(' OK')
        except Exception as e:
            LOG.debug('Exception when verifing URL: %s: %s', e.__class__.__name__, str(e))
            self.server_status.set_text(' X ')

    @defer.inlineCallbacks
    def on_credentials_changed(self, widget, *data):
        login = self.login_entry.get_text().strip()
        passwd = self.passwd_entry.get_text().strip()

        if self.login_status_task:
            self.login_status_task.cancel()

        self.login_status.set_text('...')

        if not passwd:
            self.passwd_is_hash = False

        if not login or not passwd:
            return

        url = self.server_url_entry.get_text().strip()

        if not url:
            return

        self.login_status_task = ScheduledTask(self._check_credentials, url=url,
                                               login=login, passwd=passwd)
        try:
            yield self.login_status_task.schedule(1)

            LOG.debug('Credentials: OK')
            self.login_status.set_text(' OK')
        except Exception as e:
            LOG.debug('Exception when verifing credentials: %s: %s', e.__class__.__name__, str(e))
            self.login_status.set_text(' X ')

    def _check_connection(self, url):
        return RssClient.test_connection(url)

    def _check_credentials(self, url, login, passwd):
        pwdhash = self._create_passwd_hash(passwd)
        client = RssClient()
        client.connect(url, login, pwdhash)
        return client.get_channels()  # do request with credentials

    def _create_passwd_hash(self, passwd):
        assert self.salt, 'salt not set'

        if self.passwd_is_hash:
            return passwd

        from hashlib import sha256
        digest = sha256(self.salt + passwd)
        return digest.hexdigest()


class AddChannel(object):
    def __init__(self, ui_file):
        self.confirmed = False
        self.url = None

        self._init_window(ui_file)

    def _init_window(self, ui_file):
        self.builder = gtk.Builder()
        self.builder.add_from_file(ui_file)

        signals = {'on_ok_bnt_clicked': self.on_ok_btn_clicked,
                   'on_cancel_bnt_clicked': lambda widget, *data: self.close()}

        self.builder.connect_signals(signals)

        self._set_widget_objects()

        self.dialog.connect('destroy', lambda widget, *data: self.close())
        self.dialog.set_modal(True)

    def _set_widget_objects(self):
        widgets = ('dialog', 'url_entry')
        go = self.builder.get_object
        for widget_name in widgets:
            setattr(self, widget_name, go(widget_name))

    def close(self):
        self.dialog.hide()
        self.dialog.destroy()

    def show(self):
        self.dialog.run()

    def on_ok_btn_clicked(self, widget, *data):
        url = self.url_entry.get_text().strip()

        if not url:
            show_error_dialog(self.dialog, 'Není zadána URL adresa.')
            return

        self.url = url
        self.confirmed = True

        self.close()


class MainWindow(object):
    def __init__(self, ui_file):
        self.client = None
        self.entry_cache = {}

        self._init_window(ui_file)

    def _init_window(self, ui_file):
        self.builder = gtk.Builder()
        self.builder.add_from_file(ui_file)

        signals = {'on_quit_mi_activate': lambda widget, *data: self.exit(),
                   'on_connect_mi_activate': self.on_connect_mi_activate,
                   'on_disconnect_mi_activate': self.on_disconnect_mi_activate,
                   'on_config_mi_activate': self.on_config_mi_activate,
                   'on_new_channel_mi_activate': self.on_new_channel_mi_activate,
                   'on_del_channel_mi_activate': self.on_del_channel_mi_activate,
                   'on_refresh_mi_activate': self.on_refresh_mi_activate,
                   'on_channels_treeview_cursor_changed': self.on_channels_treeview_cursor_changed,
                   'on_entries_treeview_cursor_changed': self.on_entries_treeview_cursor_changed}

        self.builder.connect_signals(signals)

        self._set_widget_objects()

        self.main_window.connect('destroy', lambda widget, *data: self.exit())

    def _set_widget_objects(self):
        widgets = ('main_window', 'connect_mi', 'disconnect_mi',
                   'new_channel_mi', 'del_channel_mi', 'refresh_mi',
                   'progress_spinner', 'progress_label',
                   'channels_treeview', 'entries_treeview',
                   'channels_liststore', 'entries_liststore',
                   'summary_textbuffer')
        go = self.builder.get_object
        for widget_name in widgets:
            setattr(self, widget_name, go(widget_name))

    @property
    def is_connected(self):
        return self.client is not None

    def show(self):
        self.main_window.show_all()

    def exit(self):
        reactor.stop()

    def on_config_mi_activate(self, widget, *data):
        open_config_dialog(self.main_window)

    @defer.inlineCallbacks
    def on_connect_mi_activate(self, widget, *data):
        yield self.connect()

    @defer.inlineCallbacks
    def on_disconnect_mi_activate(self, widget, *data):
        yield self.disconnect()

    @defer.inlineCallbacks
    def on_new_channel_mi_activate(self, widget, *data):
        assert self.is_connected, 'not connected'

        LOG.debug('New add channel dialog')

        dialog = open_add_channel_dialog(self.main_window)

        if not dialog.confirmed:
            LOG.debug('User cancelled dialog')
            return

        assert dialog.url, 'URL not set'
        LOG.debug('Adding channel %s', dialog.url)

        self.do_progress(True, 'Přidávám kanál ...')
        try:
            channel_id = None
            try:
                channel_id = yield self.client.add_channel(dialog.url)
            except:
                show_error_dialog(self.main_window, 'Při přidávání kanálu nastala chyba. Zkuste to později.')
                raise  # skip code below

            try:
                yield self.client.reload_channel(channel_id)
            except:
                show_error_dialog(self.main_window, 'Při načítání kanálu nastala chyba. Zkuste později refresh kanálů.')
                raise  # skip code below

            channels = yield self.get_channels()
            self.show_channels(channels)
        except Exception as e:
            LOG.warning('Exception when adding channel: %s: %s', e.__class__.__name__, str(e))

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Kanál přidán ...')

    @defer.inlineCallbacks
    def on_del_channel_mi_activate(self, widget, *data):
        assert self.is_connected, 'not connected'

        channel_id = self.get_selected_channel_id()

        self.do_progress(True, 'Odstraňuji kanál ...')
        try:
            yield self.client.remove_channel(channel_id)
        except Exception as e:
            LOG.warning('Exception when removing channel: %s: %s', e.__class__.__name__, str(e))

            show_error_dialog(self.main_window, 'Nastala chyba - zkuste restartovat aplikaci')

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Kanál odstraněn ...')

        self.remove_selected_channel()

    @defer.inlineCallbacks
    def on_refresh_mi_activate(self, widget, *data):
        assert self.is_connected, 'not connected'

        self.do_progress(True, 'Obnovuji pohled ...')
        try:
            yield self.refresh_all()
        except Exception as e:
            LOG.warning('Exception when connecting: %s: %s', e.__class__.__name__, str(e))

            show_error_dialog(self.main_window, 'Nastala chyba - zkuste restartovat aplikaci')

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Pohled obnoven ...')

    @defer.inlineCallbacks
    def on_channels_treeview_cursor_changed(self, widget, *data):
        channel_id = self.get_selected_channel_id()

        self.do_progress(True, 'Načítám položky ...')
        try:
            entries = yield self.get_entries(channel_id)
        except Exception as e:
            LOG.warning('Exception when loading entries: %s: %s', e.__class__.__name__, str(e))

            show_error_dialog(self.main_window, 'Nastala chyba - zkuste restartovat aplikaci')

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Položky načteny ...')

            yield self.show_entries(entries)

    @defer.inlineCallbacks
    def on_entries_treeview_cursor_changed(self, widget, *data):
        channel_id = self.get_selected_channel_id()
        entry_id = self.get_selected_entry_id()

        self.show_summary(channel_id, entry_id)
        new_value = self.update_entry_read_value()

        self.do_progress(True, 'Označuji položku jako přečtenou ...')
        try:
            yield self.set_entry_read(channel_id, entry_id, new_value)
        except Exception as e:
            LOG.warning('Exception when setting entry read: %s: %s', e.__class__.__name__, str(e))

            show_error_dialog(self.main_window, 'Nastala chyba - zkuste restartovat aplikaci')

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Položka označena jako přečtená ...')

    @defer.inlineCallbacks
    def connect(self):
        assert not self.is_connected, 'connected'

        self.do_progress(True, 'Připojuji ...')
        try:
            url, login, passwd = yield self.load_user_config()
            LOG.debug('URL: %s, login: %s, passwd: %s', url, login, passwd)

            self.client = RssClient()
            self.client.connect(url, login, passwd)

            LOG.debug('RssClient created')

            yield self.refresh_all()

            self.connect_mi.set_sensitive(False)
            self.disconnect_mi.set_sensitive(True)
            self.new_channel_mi.set_sensitive(True)
            self.del_channel_mi.set_sensitive(True)
            self.refresh_mi.set_sensitive(True)
        except Exception as e:
            LOG.warning('Exception when connecting: %s: %s',
                        e.__class__.__name__, str(e))

            self.client = None

            show_error_dialog(self.main_window, 'Nelze se připojit - zkontrolujte nastavení')

            self.do_progress(False, '...')
        else:
            self.do_progress(False, 'Připojeno ...')

    def disconnect(self):
        assert self.is_connected, 'not connected'

        self.do_progress(True, 'Odpojuji ...')
        try:
            self.client = None

            self.connect_mi.set_sensitive(True)
            self.disconnect_mi.set_sensitive(False)
            self.new_channel_mi.set_sensitive(False)
            self.del_channel_mi.set_sensitive(False)
            self.refresh_mi.set_sensitive(False)

            self.clear_all()
        except Exception as e:
            LOG.warning('Exception when disconnecting: %s : %s',
                        e.__class__.__name__, str(e))
        finally:
            self.do_progress(False, 'Odpojeno ...')

    @defer.inlineCallbacks
    def refresh_all(self):
        self.entry_cache.clear()
        self.clear_all()
        channels = yield self.get_channels()
        self.show_channels(channels)

    @defer.inlineCallbacks
    def get_channels(self):
        LOG.debug('Loading channels')

        channels = yield self.client.get_channels()

        LOG.debug('Count of channels: %d', len(channels))

        defer.returnValue(channels)

    def show_channels(self, channels):
        self.clear_channels()

        for channel in channels:
            channel_id = channel['id']
            channel_url = channel['url']
            channel_title = channel['title']
            if not channel_title:
                channel_title = '[Nenačteno]'
            row = (channel_id, channel_url, channel_title)
            self.channels_liststore.append(row)

    def get_selected_channel_id(self):
        selection = self.channels_treeview.get_selection()
        tree_iter = selection.get_selected()[1]

        return self.channels_liststore.get(tree_iter, 0)[0]

    @defer.inlineCallbacks
    def get_entries(self, channel_id):
        LOG.debug('Loading entries (channel_id: %d)', channel_id)

        entries = yield self.client.get_entries(channel_id)

        cache = self.entry_cache.setdefault(channel_id, {})

        for entry in entries:
            entry_id = entry['id']

            if entry_id not in cache:
                cache[entry_id] = entry

        LOG.debug('Count of entries: %d', len(cache))

        defer.returnValue(cache)

    @defer_to_thread
    def show_entries(self, entries):
        self.clear_entries()
        self.clear_summary()

        for entry_id in sorted(entries.keys()):
            entry = entries[entry_id]
            row = (entry['id'], entry['title'], entry['read'])
            self.entries_liststore.append(row)

    def get_selected_entry_id(self):
        selection = self.entries_treeview.get_selection()
        tree_iter = selection.get_selected()[1]

        return self.entries_liststore.get(tree_iter, 0)[0]

    def show_summary(self, channel_id, entry_id):
        entry = self._get_entry_from_cache(channel_id, entry_id)
        if not entry:
            return

        self.clear_summary()

        summary = entry['summary'].strip()
        self.summary_textbuffer.set_text(summary)

    def update_entry_read_value(self):
        selection = self.entries_treeview.get_selection()
        row_iter = selection.get_selected()[1]
        current_value = self.entries_liststore.get_value(row_iter, 2)
        new_value = not current_value
        self.entries_liststore.set_value(row_iter, 2, new_value)
        return new_value

    @defer.inlineCallbacks
    def set_entry_read(self, channel_id, entry_id, read):
        entry = self._get_entry_from_cache(channel_id, entry_id)
        if not entry:
            return

        entry['read'] = read

        LOG.debug('Setting entry read (entry_id: %d, read: %s)', entry_id, read)
        yield self.client.set_entry_read(entry_id, read)

    def remove_selected_channel(self):
        selection = self.channels_treeview.get_selection()
        self.channels_liststore.remove(selection.get_selected()[1])

    def clear_channels(self):
        self.channels_liststore.clear()

    def clear_entries(self):
        self.entries_liststore.clear()

    def clear_summary(self):
        start_iter = self.summary_textbuffer.get_start_iter()
        end_iter = self.summary_textbuffer.get_end_iter()
        self.summary_textbuffer.delete(start_iter, end_iter)

    def clear_all(self):
        self.clear_channels()
        self.clear_entries()
        self.clear_summary()

    @defer_to_thread
    def load_user_config(self):
        cfg = UserConfig()

        try:
            url = cfg.get('server', 'url').strip()
            login = cfg.get('user', 'login').strip()
            passwd = cfg.get('user', 'passwd').strip()

            return url, login, passwd
        except (NoOptionError, NoSectionError):
            raise ValueError('Cannot load user configuration')

    def do_progress(self, start, message):
        if start:
            self.progress_spinner.start()
        else:
            self.progress_spinner.stop()

        self.progress_label.set_text(message)

    def _get_entry_from_cache(self, channel_id, entry_id):
        cache = self.entry_cache.get(channel_id, None)
        if not cache:
            LOG.warning('Empty entry cache (channel_id: %d)', channel_id)
            return

        entry = cache.get(entry_id, None)
        if not entry:
            LOG.warning('Entry not in cache (channel_id: %d, entry_id: %d',
                        channel_id, entry_id)
            return

        return entry


def setup_logging():
    cfg = Config()
    format = cfg.get('logging', 'format')
    level = int(cfg.get('logging', 'level'))
    filename = cfg.get('logging', 'filename')
    if filename == '' or filename == 'stdout':
        filename = None

    logging.basicConfig(format=format, level=level, filename=filename)


def main():
    setup_logging()

    open_main_window()

    reactor.run()

if __name__ == '__main__':
    main()
